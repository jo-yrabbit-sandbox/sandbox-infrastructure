name: Reusable Bot Deploy

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
    secrets:
      TELEGRAM_TOKEN:
        required: true

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: "us-east-2"
  AWS_ACCOUNT_ID: "537124940748"

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/bot-deployment-${{ github.event.repository.name }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 900
      
      - name: Update Telegram Token in SSM
        run: |
          aws ssm put-parameter \
            --name "/${{ inputs.environment }}/bots/${{ github.event.repository.name }}/telegram-token" \
            --value "${{ secrets.TELEGRAM_TOKEN }}" \
            --type "SecureString" \
            --overwrite

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.environment }}-${{ github.event.repository.name }}
          IMAGE_TAG: 0325e315b8a3dfa824dd42b2cfa9f9d6ae9a6410
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # - name: Update ECS service
      #   run: |
      #     aws ecs update-service \
      #       --cluster ${{ inputs.environment }}-telegram-bot-cluster \
      #       --service ${{ inputs.environment }}-${{ github.event.repository.name }} \
      #       --force-new-deployment
      
      - name: Update ECS service
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.environment }}-${{ github.event.repository.name }}
          IMAGE_TAG: 0325e315b8a3dfa824dd42b2cfa9f9d6ae9a6410
        run: |
          # Retrieve current task definition
          aws ecs describe-task-definition \
            --task-definition ${{ inputs.environment }}-${{ github.event.repository.name }} \
            | jq 'del(.taskDefinition.tags) | 
                  .taskDefinition | {
                    family, 
                    taskRoleArn, 
                    executionRoleArn, 
                    networkMode, 
                    containerDefinitions, 
                    volumes, 
                    placementConstraints, 
                    requiresCompatibilities, 
                    cpu, 
                    memory, 
                    tags: (.tags | select(. != null and length > 0))
                  }' > task-def.json

          # Update image reference
          jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" \
            '.containerDefinitions[0].image = $IMAGE' \
            task-def.json > updated-task-def.json
      
          # Register new task definition
          aws ecs register-task-definition \
            --cli-input-json file://updated-task-def.json
      
          # Update service to use new task definition
          aws ecs update-service \
            --cluster ${{ inputs.environment }}-telegram-bot-cluster \
            --service ${{ inputs.environment }}-${{ github.event.repository.name }} \
            --force-new-deployment