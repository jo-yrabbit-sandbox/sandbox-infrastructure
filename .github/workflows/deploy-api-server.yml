name: Deploy API Server to AWS
on:
  push:
    branches: [ main ]
    paths:
      - 'api-server/api/**'
      - 'api-server/scripts/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.DEPLOY_ROLE_ARN  }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-duration-seconds: 900

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.1.7"
          terraform_wrapper: false

      - name: Debug Directory
        run: |
          echo "Contents of shared/terraform:"
          ls -la shared/terraform/

      - name: Terraform Init
        working-directory: shared/terraform
        run: |
          terraform init \
            -backend-config="bucket=jolly-sandbox-terraform-state" \
            -backend-config="key=infrastructure/terraform.tfstate" \
            -backend-config="region=us-east-2" \
            -backend-config="dynamodb_table=terraform-state-locks" \
            -backend-config="encrypt=true"

      - name: Get Instance Details
        working-directory: shared/terraform
        run: |
          # Remember to set terraform_wrapper = false
          SG_ID=$(terraform output -raw api_server_security_group_id)
          echo "Got SG_ID: $SG_ID"
          echo "security_group_id=$SG_ID" >> $GITHUB_OUTPUT

          EC2_DNS=$(terraform output -raw api_server_endpoint)
          echo "Got EC2 DNS: $EC2_DNS"
          echo "ec2_dns=$EC2_DNS" >> $GITHUB_OUTPUT
        id: instance

      - name: Update Security Group
        run: |
          RUNNER_IP=$(curl -s https://api.ipify.org)
          echo "Runner's public IP: $RUNNER_IP"
          echo "Security Group ID: ${{ steps.terraform.outputs.security_group_id }}"          
         
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ steps.terraform.outputs.security_group_id }} \
            --protocol tcp \
            --port 22 \
            --cidr $RUNNER_IP/32
          echo "Successfully added temporary rule to GitHub runner"

      - name: Setup SSH and Test Connection
        run: |
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          chmod 700 ~/.ssh
          chmod 600 ~/.ssh/known_hosts
          echo "Created SSH directory and files"

          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2_key.pem
          chmod 600 ~/.ssh/ec2_key.pem
          echo "Added EC2 ssh key to SSH directory"

          echo "EC2 DNS: ${{ steps.terraform.outputs.ec2_dns }}"
          echo "StrictHostKeyChecking no" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

          ssh -i ~/.ssh/ec2_key.pem ${{ secrets.EC2_USERNAME }}@${{ steps.terraform.outputs.ec2_dns }} 'echo "SSH connection test successful"'

      - name: Deploy to EC2
        env:
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          GITHUB_BRANCH: ${{ github.ref_name }}
        run: |
          ssh -i ~/.ssh/ec2_key.pem ${{ secrets.EC2_USERNAME }}@${{ steps.terraform.outputs.ec2_dns }} \
            "REDIS_HOST=$REDIS_HOST bash -s" < api-server/scripts/deploy.sh "$GITHUB_BRANCH"

      - name: Cleanup Security Group
        if: always()
        run: |
          RUNNER_IP=$(curl -s https://api.ipify.org)

          # Check if the rule exists before trying to remove it
          RULE_EXISTS=$(aws ec2 describe-security-groups \
            --group-ids ${{ steps.terraform.outputs.security_group_id }} \
            --filters "Name=ip-permission.cidr,Values=$RUNNER_IP/32" \
            --filters "Name=ip-permission.from-port,Values=22" \
            --query 'SecurityGroups[*].IpPermissions[?FromPort==`22`]' \
            --output text)
          
          if [ ! -z "$RULE_EXISTS" ]; then
            echo "Removing temporary security group rule..."
            aws ec2 revoke-security-group-ingress \
              --group-id ${{ steps.terraform.outputs.security_group_id }} \
              --protocol tcp \
              --port 22 \
              --cidr $RUNNER_IP/32
          else
            echo "Security group rule not found, skipping removal"
          fi